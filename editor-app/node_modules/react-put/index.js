'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function cloneStatic(target, source) {
  var blackList = [// from 'hoist-non-react-statics'
  'childContextTypes', 'contextTypes', 'defaultProps', 'displayName', 'getDefaultProps', 'mixins', 'propTypes', 'type', 'name', 'length', 'prototype', 'caller', 'arguments', 'arity'];
  var keys = Object.keys(source).filter(function (k) {
    return blackList.indexOf(k) === -1;
  });
  var filteredSource = keys.reduce(function (acc, k) {
    return _extends({}, acc, _defineProperty({}, k, source[k]));
  }, {});
  return _extends(target, filteredSource);
}

function connectPut() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var notFound = options.notFound,
      putFunctionName = options.putFunctionName;
  var mapPropToDictionary = options.mapPropToDictionary,
      dictionary = options.dictionary;

  notFound = notFound || function (key) {
    return '$$' + key;
  };
  putFunctionName = putFunctionName || 'put';
  return function (ReactComponent) {
    var Put = function (_Component) {
      _inherits(Put, _Component);

      function Put(props) {
        _classCallCheck(this, Put);

        var _this = _possibleConstructorReturn(this, (Put.__proto__ || Object.getPrototypeOf(Put)).call(this, props));

        _this.getDictionary = function (_props) {
          if (mapPropToDictionary) {
            return _extends({}, dictionary, mapPropToDictionary(_props || {}));
          }
          return dictionary || {};
        };
        _this.state = {
          dictionary: _this.getDictionary(_this.props)
        };
        _this.put = function (key) {
          for (var _len = arguments.length, context = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            context[_key - 1] = arguments[_key];
          }

          var formatter = _this.state.dictionary[key];
          if (formatter) {
            if (formatter instanceof Function) {
              return formatter.apply(undefined, context);
            }
            return formatter;
          }
          return notFound(key);
        };
        return _this;
      }

      _createClass(Put, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(props) {
          if (mapPropToDictionary) {
            this.setState({ dictionary: this.getDictionary(props) });
          }
        }
      }, {
        key: 'render',
        value: function render() {
          var injectedProps = _defineProperty({}, putFunctionName, this.put);
          return _react2.default.createElement(ReactComponent, _extends({}, this.props, this.state, injectedProps));
        }
      }]);

      return Put;
    }(_react.Component);

    return cloneStatic(Put, ReactComponent);
  };
}

exports.default = connectPut;
module.exports = exports['default'];
